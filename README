DEPENDENCIES
------------

  - A gcc which is recent enough that C++11 is supported.  
    I know that gcc 4.8.1 works, and that 4.4.7 is too old.

  - libhdf5 (https://www.hdfgroup.org/HDF5/release/obtain5.html)
    Note that this is a link to HDF5 v1.8.  I imagine v1.10 also works but haven't tested it yet.

  - Optional but recommended: The 'PIL' python imaging library (you can test whether you have 
    it with 'import PIL' from python).  If you need to install it, I recommend the 'Pillow' 
    variant (pip install Pillow)

  - Optional but recommended: simpulse (https://github.com/kmsmith137/simpulse)
    You'll need this if you want to inject simulated FRB's.
    Note that simpulse requires cython and fftw3 (see its README).

  - Optional: bonsai (https://github.com/CHIMEFRB/bonsai)
    This is an incremental incoherent dedisperser.
    Note that bonsai v3 or later is required! (currently on branch 'devel_v3', not github master)
    Note that bonsai requires a very recent cython (see its README).

  - Optional: ch_frb_io (https://github.com/CHIMEFRB/ch_frb_io)
    You'll need this if you want to analyze CHIME data.  

    Note: ch_frb_io is really two libraries, a python library and a C++ library, 
    and you only need the C++ part (see installation instructions in the ch_frb_io README).

  - Optional: psrfits_utils (https://github.com/scottransom/psrfits_utils)
    You'll need this if you want to analyze data in PSRFITS format (e.g. gbncc).

    Note: if psrfits_utils installation fails due to autoconf warnings which don't look 
          serious, it may help to edit configure.ac and remove the "-Werror" in the line 
          AM_INIT_AUTOMAKE([-Wall -Werror foreign])


INSTALLATION
------------

  - Create a file ./Makefile.local containing compiler flags, library locations, etc.
    The format is defined in Makefile, but it will probably be easiest to copy one of
    the examples in site/ and customize.  For each of the optional dependencies above,
    there is a y/n flag in Makefile.local to indicate whether you have it.

  - make all install

  - For some quick unit tests, do 
      ./run-unit-tests


QUICK START
-----------

  - This code is best "documented by example", so defintely start by checking out the following:

      examples/example1_toy     illustrates basic interface + writing a new transform in python
      examples/example2_gbncc   detrend and dedisperse GBNCC data
      examples/example3_chime   detrend and dedisperse CHIME pathfinder data

  - From here I recommend reading the Python docstrings, starting with the toplevel 'rf_pipelines'
    module.


TO DO LIST
----------

  - More detrenders and RFI-removing filters is a huge priority!

  - In particular a detrender which correctly handles the CHIME switched noise source.

  - The plotting_transform is currently very primitive and could use improvement

  - Same goes for the 'bonsai-plot-triggers' script.  We should also have more
    postprocessing scripts for the bonsai trigger file (peak finders etc.)


LOW-LEVEL TO DO LIST
--------------------

  - Currently implemented low-level buffer scheme is a little suboptimal and copies
    data more than necessary

  - The under-the-hood python-wrapping is a mess, making difficult to export a new
    stream or transform written in C++ to python.

  - Currently it's not possible to write streams in python.
